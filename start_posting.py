#!/usr/bin/env python2
# author: Alexander Bersenev (Bay) from Hackerdom team
# posts the flags in flags*.txt to submit server

from flag_format import FLAG_FORMAT

from glob import glob
from time import time,sleep
import re
import socket
import random

FLAGS_GLOB                = "./flags*.txt"
FLAGS_IN_SUMBIT_ITERATION = 10
RESTART_DELAY             = 2       # in sec

class UsedFlags:
    GOOD_FLAGS_FILE = "posted_good_flags.txt"
    BAD_FLAGS_FILE  = "posted_bad_flags.txt"
    
    def __init__(self):
        # create flags files if not exists
        open(UsedFlags.GOOD_FLAGS_FILE, 'ab').close()
        open(UsedFlags.BAD_FLAGS_FILE,  'ab').close()

        good_flags_content = open(UsedFlags.GOOD_FLAGS_FILE,"rb",1).read()
        good_flags         = re.findall(FLAG_FORMAT, good_flags_content)
        self.good_flags    = set(good_flags)
        
        bad_flags_content  = open(UsedFlags.BAD_FLAGS_FILE,"rb",1).read()
        bad_flags          = re.findall(FLAG_FORMAT, bad_flags_content)
        self.bad_flags     = set(bad_flags)
    
    def add_good_flag(self, flag):
        if flag not in self.good_flags:
            with open(UsedFlags.GOOD_FLAGS_FILE, "ab") as f:
                f.write(flag + b"\n")
            self.good_flags.add(flag)
            
    def add_bad_flag(self, flag):
        if flag not in self.bad_flags:
            with open(UsedFlags.BAD_FLAGS_FILE, "ab") as f:
                f.write(flag + b"\n")
            self.bad_flags.add(flag)
    
    def get(self):
        return self.good_flags | self.bad_flags

###################################################
        
def submit_flags(flags,used_flags):
    "YOU LIKELY HAVE TO WRITE THIS FUNCTION"
    HOST = '127.0.0.1' # checksystem hostaddr here
    PORT = 31337       # checksystem port
    
    # connecting
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))
    
    greeting = s.recv(4096) # recv greeting
    if not re.search(b'Hello', greeting):
        print("Not greeted: %s" % greeting)
        return
        
    s.send(b"hackerdom\n") #sending team name
    
    pass_greeting = s.recv(4096)
    if not re.search(b'pass', pass_greeting):
        print("Not pass-greeted: %s" % pass_greeting)
        return
    
    s.send(b"pass\n")
    
    keys_prompt = s.recv(4096)
    if not re.search(b'keys', keys_prompt):
        print("Not keys prompted")
        return
    
    for flag in flags:
        s.send(flag + b"\n")
        
        result = s.recv(4096)

        if re.search(b'Good', result):
            used_flags.add_good_flag(flag)
            #print("Hooray")
        elif re.search(b'Bad', result):
            used_flags.add_bad_flag(flag)
        else:
            print("unknown")

##################################################    
    
def get_sendable_flags(used_flags):
    sendable_flags = set()

    flag_files = glob(FLAGS_GLOB)     # all files with flags
    for flag_file in flag_files:
        file_contents   = open(flag_file,"rb",1).read()
        flags           = re.findall(FLAG_FORMAT, file_contents)
        sendable_flags |= set(flags)
    sendable_flags -= used_flags.get()
    return list(sendable_flags)

used_flags = UsedFlags()

# main posting cycle
while True:
    begin_load_time = time()
    flags           = get_sendable_flags(used_flags)
    random.shuffle(flags)
    sended_flags    = flags[:FLAGS_IN_SUMBIT_ITERATION]
    end_load_time   = time()
    
    print("Loaded %s new flags in %s sec, sending %s random" % 
          (len(flags), end_load_time - begin_load_time, len(sended_flags)))

    good_before = len(used_flags.good_flags)
    bad_before  = len(used_flags.bad_flags)

    try:
        submit_flags(sended_flags, used_flags)
    except Exception as E:
        print ("Exception while submitting: %s" % E)
    
    good_after = len(used_flags.good_flags)
    bad_after  = len(used_flags.bad_flags)

    print("Iteration finished: good %s, bad %s" % 
          (good_after - good_before, bad_after - bad_before))
    sleep(RESTART_DELAY)
