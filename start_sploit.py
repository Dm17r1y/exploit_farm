#!/usr/bin/env python2
# author: Alexander Bersenev (Bay) from Hackerdom team
# starts one sploit for all teams

from flag_format import FLAG_FORMAT
from team_list   import TEAMS

from time        import sleep, strftime
from os.path     import basename, splitext, abspath, exists
from threading   import Thread
from subprocess  import Popen, PIPE, STDOUT
import re
import sys
import os

def log(text):
    print("%s " % strftime("%H:%M:%S") + text)

class TeamOwner(Thread):
    RESTART_DELAY = 5 # in sec
    
    def __init__(self, sploit_name, team_name, team_ip):
        Thread.__init__(self)

        self.alive       = True
        
        self.sploit_name = sploit_name
        self.team_name   = team_name
        self.team_ip     = team_ip
        
        spl_short_name = splitext(basename(sploit_name))[0]
        log_filename   = "flags_%s_%s.txt" % (spl_short_name, team_name)
        self.logfile   = open(log_filename, "ab", 0)
        
        self.existed_flags = set()
       
    def run(self):
        log("Lauching %s %s for %s every %s seconds" % 
              (basename(self.sploit_name), self.team_ip, self.team_name,
              TeamOwner.RESTART_DELAY))
        while True:
            try:
                need_launch_in_shell = (os.name == "nt")
                # launch sploit proccess with team_ip as arg
                spl = Popen([self.sploit_name, self.team_ip],
                            stdout=PIPE, stderr=STDOUT, 
                            shell=need_launch_in_shell, bufsize=1)
                # get output by lines until EOF
                while True:
                    if not self.alive:
                        return
                    nextline = spl.stdout.readline()
                    if not nextline:
                        break
                        
                    nextline = nextline.strip()
                    if not nextline:
                        continue
                    print(self.team_name + ": " + 
                          nextline.decode("utf8", "replace"))
                    
                    flags = re.findall(FLAG_FORMAT, nextline)
                    for flag in flags:
                        log("Flag from %s: %s" % 
                            (self.team_name, flag.decode("utf8", "replace")))
                        if flag not in self.existed_flags:
                            self.logfile.write(flag + b"\n")
                            self.existed_flags.add(flag)
                        
                spl.communicate() # wait for finish
            except Exception as E:
                log("Exception, team %s: %s" % (self.team_name, E) + "\a")

            for sec in range(int(TeamOwner.RESTART_DELAY)):
                sleep(1)
                if not self.alive: # we are still alive?
                    return
      
    def stop(self):
        self.alive = False

# LETS ROCK !!!          
if len(sys.argv) < 2:
    print("Usage: start_sploit.py <sploit>")
    sys.exit(1)

sploit_name = abspath(sys.argv[1])
if not exists(sploit_name):
    print("Sploit doesn't exist: " + sploit_name)
    sys.exit(1)
    
owners = list()
for team_name, team_ip in TEAMS.items():
    owner = TeamOwner(sploit_name, team_name, team_ip)
    owners.append(owner)

for owner in owners:
    owner.start()   # start pwning threads
    
# loop till ctrl-c
try:
    while True:
        sleep(31337)
        
except KeyboardInterrupt:
    print("Ctrl-c received! Shutting down the owners...")
    for owner in owners:
        owner.stop()
    for owner in owners:
        owner.join()
